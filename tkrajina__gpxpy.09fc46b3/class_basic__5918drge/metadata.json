{
  "cost": 0.00404997,
  "explanation": "",
  "output": "```python\ndef get_course(latitude_1: float, longitude_1: float, latitude_2: float, longitude_2: float,\n               loxodromic: bool=True) -> float:\n    \"\"\"\n    The initial course from one point to another,\n    expressed in decimal degrees clockwise from true North\n    (not magnetic)\n    (0.0 <= value < 360.0)\n\n    Use the default loxodromic model in most cases\n    (except when visualizing the long routes of maritime transport and aeroplanes)\n\n    Implemented from http://www.movable-type.co.uk/scripts/latlong.html\n    (sections 'Bearing' and 'Rhumb lines')\n    \"\"\"\n\n    d_lon = mod_math.radians(longitude_2 - longitude_1)\n    lat1 = mod_math.radians(latitude_1)\n    lat2 = mod_math.radians(latitude_2)\n\n    if not loxodromic:\n        y = mod_math.sin(d_lon) * mod_math.cos(lat2)\n        x = mod_math.cos(lat1) * mod_math.sin(lat2) - \\\n            mod_math.sin(lat1) * mod_math.cos(lat2) * mod_math.cos(d_lon)\n    else:\n        radian_circle = 2*mod_math.pi\n\n        if abs(d_lon) > mod_math.pi:\n            if d_lon > 0:\n                d_lon = - (radian_circle - d_lon)\n            else:\n                d_lon = radian_circle + d_lon\n\n        y = d_lon\n\n        delta = mod_math.pi/4\n        x = mod_math.log(mod_math.tan(delta + 0.5*lat2)\n                         / mod_math.tan(delta + 0.5*lat1))\n\n    course = mod_math.degrees(mod_math.atan2(y, x))\n    return (course + 180) % 360\n```",
  "rewrite": "def get_course(latitude_1: float, longitude_1: float, latitude_2: float, longitude_2: float,\n               loxodromic: bool=True) -> float:\n    \"\"\"\n    The initial course from one point to another,\n    expressed in decimal degrees clockwise from true North\n    (not magnetic)\n    (0.0 <= value < 360.0)\n\n    Use the default loxodromic model in most cases\n    (except when visualizing the long routes of maritime transport and aeroplanes)\n\n    Implemented from http://www.movable-type.co.uk/scripts/latlong.html\n    (sections 'Bearing' and 'Rhumb lines')\n    \"\"\"\n\n    d_lon = mod_math.radians(longitude_2 - longitude_1)\n    lat1 = mod_math.radians(latitude_1)\n    lat2 = mod_math.radians(latitude_2)\n\n    if not loxodromic:\n        y = mod_math.sin(d_lon) * mod_math.cos(lat2)\n        x = mod_math.cos(lat1) * mod_math.sin(lat2) - \\\n            mod_math.sin(lat1) * mod_math.cos(lat2) * mod_math.cos(d_lon)\n    else:\n        radian_circle = 2*mod_math.pi\n\n        if abs(d_lon) > mod_math.pi:\n            if d_lon > 0:\n                d_lon = - (radian_circle - d_lon)\n            else:\n                d_lon = radian_circle + d_lon\n\n        y = d_lon\n\n        delta = mod_math.pi/4\n        x = mod_math.log(mod_math.tan(delta + 0.5*lat2)\n                         / mod_math.tan(delta + 0.5*lat1))\n\n    course = mod_math.degrees(mod_math.atan2(y, x))\n    return (course + 180) % 360",
  "strategy": "llm"
}