{
  "cost": 0.00206029,
  "explanation": "",
  "output": "```python\nclass GPXBounds:\n    gpx_10_fields = gpx_11_fields = [\n            mod_gpxfield.GPXField('min_latitude', attribute='minlat', type=mod_gpxfield.FLOAT_TYPE),\n            mod_gpxfield.GPXField('max_latitude', attribute='maxlat', type=mod_gpxfield.FLOAT_TYPE),\n            mod_gpxfield.GPXField('min_longitude', attribute='minlon', type=mod_gpxfield.FLOAT_TYPE),\n            mod_gpxfield.GPXField('max_longitude', attribute='maxlon', type=mod_gpxfield.FLOAT_TYPE),\n    ]\n\n    __slots__ = ('min_latitude', 'max_latitude', 'min_longitude', 'max_longitude')\n\n    def __init__(self, min_latitude: Optional[float] = None, max_latitude: Optional[float] = None,\n                 min_longitude: Optional[float] = None, max_longitude: Optional[float] = None) -> None:\n        self.min_latitude = min_latitude\n        self.max_latitude = max_latitude\n        self.min_longitude = min_longitude\n        self.max_longitude = max_longitude\n\n    def __iter__(self) -> Iterator[Any]:\n        return (self.min_latitude, self.max_latitude, self.min_longitude, self.max_longitude,).__iter__()\n\n    def _min(self, a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is not None and b is not None:\n            return min(a, b)\n        return None\n\n    def _max(self, a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is not None and b is not None:\n            return max(a, b)\n        return None\n\n    def max_bounds(self, bounds: \"GPXBounds\") -> \"GPXBounds\":\n        return GPXBounds(self._min(self.min_latitude, bounds.min_latitude),\n            self._max(self.max_latitude, bounds.max_latitude),\n            self._max(self.min_longitude, bounds.min_longitude),\n            self._min(self.max_longitude, bounds.max_longitude))\n```",
  "rewrite": "class GPXBounds:\n    gpx_10_fields = gpx_11_fields = [\n            mod_gpxfield.GPXField('min_latitude', attribute='minlat', type=mod_gpxfield.FLOAT_TYPE),\n            mod_gpxfield.GPXField('max_latitude', attribute='maxlat', type=mod_gpxfield.FLOAT_TYPE),\n            mod_gpxfield.GPXField('min_longitude', attribute='minlon', type=mod_gpxfield.FLOAT_TYPE),\n            mod_gpxfield.GPXField('max_longitude', attribute='maxlon', type=mod_gpxfield.FLOAT_TYPE),\n    ]\n\n    __slots__ = ('min_latitude', 'max_latitude', 'min_longitude', 'max_longitude')\n\n    def __init__(self, min_latitude: Optional[float] = None, max_latitude: Optional[float] = None,\n                 min_longitude: Optional[float] = None, max_longitude: Optional[float] = None) -> None:\n        self.min_latitude = min_latitude\n        self.max_latitude = max_latitude\n        self.min_longitude = min_longitude\n        self.max_longitude = max_longitude\n\n    def __iter__(self) -> Iterator[Any]:\n        return (self.min_latitude, self.max_latitude, self.min_longitude, self.max_longitude,).__iter__()\n\n    def _min(self, a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is not None and b is not None:\n            return min(a, b)\n        return None\n\n    def _max(self, a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is not None and b is not None:\n            return max(a, b)\n        return None\n\n    def max_bounds(self, bounds: \"GPXBounds\") -> \"GPXBounds\":\n        return GPXBounds(self._min(self.min_latitude, bounds.min_latitude),\n            self._max(self.max_latitude, bounds.max_latitude),\n            self._max(self.min_longitude, bounds.min_longitude),\n            self._min(self.max_longitude, bounds.max_longitude))",
  "strategy": "llm"
}